load("~/Dropbox/Documents/School/Columbia/Research/Astronomy/Hierarchical Model/Expectation Propagation/EP.RData")
hist(long)
length(which(long<1))
length(which(x<1))
length(which(long<1 & long>0))
length(which(long<360 & long>359))
length(which(long==360))
length(which(long==0))
ceiling(.1)*3600/360%%3600
ceiling(.1*3600/360)%%3600
ceiling(.07*3600/360)%%3600
ceiling(.17*3600/360)%%3600
ceiling(2.17*3600/360)%%3600
proc.time(2+2)
system.time(2+@)
system.time(2+2)
system.time(rnorm(1000,1,2))
system.time(rnorm(1000000,1,2))
J <- 3600
K <- 60
n.samp <- 20
subset <- which(long < 360 & long > 0 & i100 > 0 & i100 < 4);
y <- FUV[subset];
x <- i100[subset];
bin <- ceiling(long[subset]*J/360)%%J;
subset <- as.vector(apply(as.matrix(unique(bin)), 1, function(x) sample(which(bin==x), n.samp)));
length(subset)
length(subset)/n.samp
hist(bin)
hist(bin,breaks=360)
hist(bin,breaks=3600)
bin <- bin[subset];
x <- x[subset];
y <- y[subset];
sub.data <- data.frame(x = x, y = y, bin = bin);
save.image("~/Dropbox/Documents/School/Columbia/Research/Astronomy/Hierarchical Model/Expectation Propagation/EP.RData")
actual.data <- list(N=length(y), M=4, B=J, x=sub.data$x, y=sub.data$y, bin=sub.data$bin,
Mu_Cav=rep(5.5,4), Sig_Cav=diag(4)*4);
actual.fit <- sampling(fit, data = actual.data, iter = 1000, chains = 4);
require("rstan")
actual.fit <- sampling(fit, data = actual.data, iter = 1000, chains = 4);
min(bin)
subset <- which(long < 360 & long > 0 & i100 > 0 & i100 < 4);
min(long[subset])
ceiling(min(long[subset]*J/360))%%J
ceiling(max(long[subset]*J/360))%%J
ceiling(min(long[subset]*J/360)-1)%%J
ceiling(min(long[subset]*J/360)-1)
min(long[subset]*J/360)-1
bin <- ceiling(long[subset]*J/360-1)%%J+1;
min(bin)
max(bin)
length(unique(bin))
max(long[subset])
subset <- as.vector(apply(as.matrix(unique(bin)), 1, function(x) sample(which(bin==x), n.samp)));
subset <- as.vector(apply(as.matrix(unique(bin)), 1, function(x) sample(which(bin==x), n.samp)));
bin <- bin[subset];
x <- x[subset];
y <- y[subset];
sub.data <- data.frame(x = x, y = y, bin = bin);
actual.data <- list(N=length(y), M=4, B=J, x=sub.data$x, y=sub.data$y, bin=sub.data$bin,
Mu_Cav=rep(5.5,4), Sig_Cav=diag(4)*4);
actual.fit <- sampling(fit, data = actual.data, iter = 1000, chains = 4);
hist(x)
length(which(is.na(x)))
length(x)
length(which(is.na(y)))
subset <- which(long < 360 & long > 0 & i100 > 0 & i100 < 4);
y <- FUV[subset];
x <- i100[subset];
bin <- ceiling(long[subset]*J/360-1)%%J+1;
length(which(bin==0))
length(which(bin==1))
length(which(bin==2))
length(unique(bin))
?tapply
tapply(1:10,function(x) x^2)
tapply(1:10,1,function(x) x^2)
apply(1:10,1,function(x) x^2)
apply(as.matrix(1:10),1,function(x) x^2)
apply(as.matrix(1:10),1,function(x) length(which(bin==x)))
apply(as.matrix(1:10),1,function(x) sample(which(bin==x),1))
i100[subset][.Last.value]
hist(unique(bin))
hist(unique(bin),breaks=3600)
min(bin)
max(bin)
sample(which(bin==1),20)
sample(which(bin==1),n.samp)
FUV[subset][.Last.value]
i100[subset][.Last.value]
sample(which(bin==50),n.samp)
FUV[subset][.Last.value]
J <- 3600
K <- 60
n.samp <- 20
subset <- which(long < 360 & long > 0 & i100 > 0 & i100 < 4);
bin <- ceiling(long[subset]*J/360-1)%%J+1;
sub <- as.vector(apply(as.matrix(unique(bin)), 1, function(x) sample(which(bin==x), n.samp)));
max(sub)
length(subset)
min(sub)
bin <- bin[sub];
x <- i100[subset][sub];
y <- FUV[subset][sub];
length(which(is.na(x)))
length(which(is.na(y)))
sub.data <- data.frame(x = x, y = y, bin = bin);
actual.data <- list(N=length(y), M=4, B=J, x=sub.data$x, y=sub.data$y, bin=sub.data$bin,
Mu_Cav=rep(5.5,4), Sig_Cav=diag(4)*4);
save.image("~/Dropbox/Documents/School/Columbia/Research/Astronomy/Hierarchical Model/Expectation Propagation/EP.RData")
actual.fit <- sampling(fit, data = actual.data, iter = 1000, chains = 4);
plot(sub.data$x,sub.data$y)
plot(sub.data$x[bin==1],sub.data$y[bin==1])
plot(sub.data$x[bin==2],sub.data$y[bin==2])
J
K
J/K
astro.fit <- astro.EP(fit = fit, data = sub.data, J = J, K = K, S = 4,
prior.Mu = rep(5.5,4), SMOOTH = 0.8);
astro.fit <- astro.EP(fit = fit, data = sub.data, J = J, K = K, S = 4,
prior.Mu = rep(5.5,4), SMOOTH = 0.7);
#function to run EP on the astronomy data
astro.EP = function(fit = NULL, data = NULL, J = 360, K = 6,
prior.Mu = rep(5.5,4), S = 10, P = 4, SMOOTH = 0.9){
# Extract data
x <- data$x;
y <- data$y;
bin <- data$bin;
# Initialize global and local natural parameters
Sigma.k.inv.Mu <- Sigma.k.inv <- Sigma.inv <- Sigma.inv.Mu <- Post.Sigma <- list();
Post.Mu <- matrix(0, ncol = P, nrow = S + 1);
for(k in 1:K) Sigma.k.inv.Mu[[k]] <- rep(0,P);
for(k in 1:K) Sigma.k.inv[[k]] <- diag(P)*0;
Sigma.inv[[1]] <- diag(P)*K/10;
Sigma.inv.Mu[[1]] <- Sigma.inv[[1]]%*%prior.Mu;
Post.Sigma[[1]] <- solve(Sigma.inv[[1]]);
Post.Mu[1,] <- as.vector(Post.Sigma[[1]]%*%Sigma.inv.Mu[[1]]);
# timer
init.time <- proc.time();
# The actual algorithm...
for(s in 1:S){
#update natural parameters from previous iteration
if(s>1){
Sigma.inv[[s]] <- Sigma.inv[[s-1]];
Sigma.inv.Mu[[s]] <- Sigma.inv.Mu[[s-1]];
}
for(k in 1:K){
cat(" Current Iteration Status: [", s, " out of ", S, "] \n");
cat(" Current Partition Status: [", k, " out of ", K, "] \n");
# 1. Update the Cavity Distribution...
Sigma.inv.cav <- Sigma.inv[[s]] - Sigma.k.inv[[k]];
Sigma.inv.Mu.cav <- Sigma.inv.Mu[[s]] - Sigma.k.inv.Mu[[k]];
Sigma.cav <- solve(Sigma.inv.cav);
Sigma.cav <- (Sigma.cav+t(Sigma.cav))/2; #preserve symmetry
Mu.cav <- as.vector(Sigma.cav%*%Sigma.inv.Mu.cav);
# 2. Find tilted distribution in Stan...
# Extract current partition of the data...
subset = which(bin<=k*360/K & bin>(k-1)*360/K);
y.k <- y[subset];
x.k <- x[subset];
bin.k <- (ceiling(bin[subset] - 1))%%(J/K) + 1;
tilt.data <- list(N=length(y.k), M=P, B=J/K, x=x.k, y=y.k, bin=bin.k, Mu_Cav=Mu.cav, Sig_Cav=Sigma.cav);
# Fit tilted distribution in Stan....
tilt.fit <- sampling(fit, data = tilt.data, iter = 100, chains = 4);
# Extract mean and covariance matrix....
Mu.tilt <- colMeans(extract(tilt.fit)$phi);
Sigma.tilt <- matrix(0, nrow = P, ncol = P);
Mu.tilt; #debugging
Sigma.tilt; #debugging
for(i in 1:P)
for(j in 1:P)
Sigma.tilt[i,j] <- cov(extract(tilt.fit)$phi[,i], extract(tilt.fit)$phi[,j]);
# Bias correction on covariance matrix....
n <- length(extract(tilt.fit)$phi[,1]);
Sigma.tilt #DEBUG
Sigma.inv.tilt <- solve(Sigma.tilt)*(n-P-2)/(n-1);
Sigma.inv.Mu.tilt <- Sigma.inv.tilt%*%Mu.tilt;
# 3. Update the Site Distribution
Sigma.k.inv[[k]] <- Sigma.inv.tilt - Sigma.inv.cav;
Sigma.k.inv.Mu[[k]] <- Sigma.inv.Mu.tilt - Sigma.inv.Mu.cav;
# 4. Update g(phi)
Sigma.inv[[s]] <- SMOOTH*Sigma.inv.tilt + (1-SMOOTH)*Sigma.inv[[s]];
Sigma.inv.Mu[[s]] <- SMOOTH*Sigma.inv.Mu.tilt + (1-SMOOTH)*Sigma.inv.Mu[[s]];
}
# Convert Natural Parameters Back Into Usual Framework
Post.Sigma[[s+1]] = solve(Sigma.inv[[s]]);
Post.Mu[s+1,] = as.vector(Post.Sigma[[s+1]]%*%Sigma.inv.Mu[[s]]);
}
#save the total time elapsed
final.time <- proc.time();
#plot phi v. s, and return all values
EP.plot(exp(Post.Mu), J, K, S);
return(list(Post.Sigma = Post.Sigma, Post.Mu = Post.Mu,
time = final.time - init.time));
}
EP.plot = function(data=NULL, J=360, K=6, S=10, params=expression(mu[alpha],tau[alpha],beta,sigma)){
P <- ncol(data);
plot(c(0:S), data[,1], xlab="Iteration", ylab=expression(phi),
ylim=c(min(data),max(data)), type='l', main=paste("EP: J =",J,", K =",K));
for(p in 2:P)
lines(c(0:S), data[,p], col=p);
legend("right", col=c(1:P), legend=params, lty=rep(1,P));
}
astro.fit <- astro.EP(fit = fit, data = sub.data, J = J, K = K, S = 4,
prior.Mu = rep(5.5,4), SMOOTH = 0.7);
astro.fit <- astro.EP(fit = fit, data = sub.data, J = J, K = K, S = 1,
prior.Mu = rep(5.5,4), SMOOTH = 0.7);
astro.fit$Post.Mu
astro.fit$Post.Sigma
save.image("~/Dropbox/Documents/School/Columbia/Research/Astronomy/Hierarchical Model/Expectation Propagation/EP.RData")
actual.fit <- sampling(fit, data = actual.data, iter = 1000, chains = 4);
colMeans(extract(actual.fit)$phi)
save.image("~/Dropbox/Documents/School/Columbia/Research/Astronomy/Hierarchical Model/Expectation Propagation/EP.RData")
astro.fit$Post.Mu
load("/Users/swupnil/Dropbox/Documents/School/Columbia/Research/Astronomy/Hierarchical Model/Expectation Propagation/EP.RData")
colMeans(extract(actual.fit)$phi)
require("rstan")
colMeans(extract(actual.fit)$phi)
sim.fit
colMeans(extract(actual.fit)$phi)
J
K
sim.data <- astro.sim(phi = colMeans(extract(actual.fit)$phi), J = J,
n.samp = n.samp);
sim.fit <- astro.EP(fit = fit, data = sim.data, J = J, K = K, S = 4,
prior.Mu = rep(5.5,4), SMOOTH = 0.8);
sim.fit <- astro.EP(fit = fit, data = sim.data, J = J, K = K, S = 4,
prior.Mu = rep(5.5,4), SMOOTH = 0.5);
#function to run EP on the astronomy data
astro.EP = function(fit = NULL, data = NULL, J = 360, K = 6,
prior.Mu = rep(5.5,4), S = 10, P = 4, SMOOTH = 0.9){
# Extract data
x <- data$x;
y <- data$y;
bin <- data$bin;
# Initialize global and local natural parameters
Sigma.k.inv.Mu <- Sigma.k.inv <- Sigma.inv <- Sigma.inv.Mu <- Post.Sigma <- list();
Post.Mu <- matrix(0, ncol = P, nrow = S + 1);
for(k in 1:K) Sigma.k.inv.Mu[[k]] <- rep(0,P);
for(k in 1:K) Sigma.k.inv[[k]] <- diag(P)*0;
Sigma.inv[[1]] <- diag(P)*K/10;
Sigma.inv.Mu[[1]] <- Sigma.inv[[1]]%*%prior.Mu;
Post.Sigma[[1]] <- solve(Sigma.inv[[1]]);
Post.Mu[1,] <- as.vector(Post.Sigma[[1]]%*%Sigma.inv.Mu[[1]]);
# timer
init.time <- proc.time();
# The actual algorithm...
for(s in 1:S){
#update natural parameters from previous iteration
if(s>1){
Sigma.inv[[s]] <- Sigma.inv[[s-1]];
Sigma.inv.Mu[[s]] <- Sigma.inv.Mu[[s-1]];
}
for(k in 1:K){
cat(" Current Iteration Status: [", s, " out of ", S, "] \n");
cat(" Current Partition Status: [", k, " out of ", K, "] \n");
# 1. Update the Cavity Distribution...
Sigma.inv.cav <- Sigma.inv[[s]] - Sigma.k.inv[[k]];
Sigma.inv.Mu.cav <- Sigma.inv.Mu[[s]] - Sigma.k.inv.Mu[[k]];
Sigma.cav <- solve(Sigma.inv.cav);
Sigma.cav <- (Sigma.cav+t(Sigma.cav))/2; #preserve symmetry
Mu.cav <- as.vector(Sigma.cav%*%Sigma.inv.Mu.cav);
# 2. Find tilted distribution in Stan...
# Extract current partition of the data...
subset = which(bin<=k*360/K & bin>(k-1)*360/K);
y.k <- y[subset];
x.k <- x[subset];
bin.k <- (ceiling(bin[subset] - 1))%%(J/K) + 1;
tilt.data <- list(N=length(y.k), M=P, B=J/K, x=x.k, y=y.k, bin=bin.k, Mu_Cav=Mu.cav, Sig_Cav=Sigma.cav);
# Fit tilted distribution in Stan....
tilt.fit <- sampling(fit, data = tilt.data, iter = 100, chains = 4);
# Extract mean and covariance matrix....
Mu.tilt <- colMeans(extract(tilt.fit)$phi);
Sigma.tilt <- matrix(0, nrow = P, ncol = P);
for(i in 1:P)
for(j in 1:P)
Sigma.tilt[i,j] <- cov(extract(tilt.fit)$phi[,i], extract(tilt.fit)$phi[,j]);
# Bias correction on covariance matrix....
n <- length(extract(tilt.fit)$phi[,1]);
Sigma.tilt #DEBUG
Sigma.inv.tilt <- solve(Sigma.tilt)*(n-P-2)/(n-1);
Sigma.inv.Mu.tilt <- Sigma.inv.tilt%*%Mu.tilt;
# 3. Update the Site Distribution
Sigma.k.inv[[k]] <- Sigma.inv.tilt - Sigma.inv.cav;
Sigma.k.inv.Mu[[k]] <- Sigma.inv.Mu.tilt - Sigma.inv.Mu.cav;
# 4. Update g(phi)
Sigma.inv[[s]] <- SMOOTH*Sigma.inv.tilt + (1-SMOOTH)*Sigma.inv[[s]];
Sigma.inv.Mu[[s]] <- SMOOTH*Sigma.inv.Mu.tilt + (1-SMOOTH)*Sigma.inv.Mu[[s]];
}
# Convert Natural Parameters Back Into Usual Framework
Post.Sigma[[s+1]] = solve(Sigma.inv[[s]]);
Post.Mu[s+1,] = as.vector(Post.Sigma[[s+1]]%*%Sigma.inv.Mu[[s]]);
}
#save the total time elapsed
final.time <- proc.time();
#plot phi v. s, and return all values
EP.plot(exp(Post.Mu), J, K, S);
return(list(Post.Sigma = Post.Sigma, Post.Mu = Post.Mu,
time = final.time - init.time));
}
EP.plot = function(data=NULL, J=360, K=6, S=10, params=expression(mu[alpha],tau[alpha],beta,sigma)){
P <- ncol(data);
plot(c(0:S), data[,1], xlab="Iteration", ylab=expression(phi),
ylim=c(min(data),max(data)), type='l', main=paste("EP: J =",J,", K =",K));
for(p in 2:P)
lines(c(0:S), data[,p], col=p);
legend("right", col=c(1:P), legend=params, lty=rep(1,P));
}
save.image("~/Dropbox/Documents/School/Columbia/Research/Astronomy/Hierarchical Model/Expectation Propagation/EP.RData")
sim.fit <- astro.EP(fit = fit, data = sim.data, J = J, K = K, S = 4,
prior.Mu = rep(5.5,4), SMOOTH = 0.3);
sim.fit
colMeans(extract(actual.fit)$phi)
save.image("~/Dropbox/Documents/School/Columbia/Research/Astronomy/Hierarchical Model/Expectation Propagation/EP.RData")
astro.fit <- astro.EP(fit = fit, data = sub.data, J = J, K = K, S = 1,
prior.Mu = rep(5.5,4), SMOOTH = 0.3);
astro.fit
astro.fit <- astro.EP(fit = fit, data = sub.data, J = J, K = K, S = 4,
prior.Mu = rep(5.5,4), SMOOTH = 0.3);
astro.fit
sqrt(abs(astro.fit$Post.Sigma[[5]]))
exp(astro.fit$Post.Mu[5,])
exp(astro.fit$Post.Mu[3,])
exp(sim.fit$Post.Mu[3,])
exp(colMeans(extract(actual.fit)$Phi))
exp(colMeans(extract(actual.fit)$phi))
#function to run EP on the astronomy data
astro.EP = function(fit = NULL, data = NULL, J = 360, K = 6,
prior.Mu = rep(5.5,4), S = 10, P = 4, SMOOTH = 0.9){
# Extract data
x <- data$x;
y <- data$y;
bin <- data$bin;
# Initialize global and local natural parameters
Sigma.k.inv.Mu <- Sigma.k.inv <- Sigma.inv <- Sigma.inv.Mu <- Post.Sigma <- list();
Post.Mu <- matrix(0, ncol = P, nrow = S + 1);
for(k in 1:K) Sigma.k.inv.Mu[[k]] <- rep(0,P);
for(k in 1:K) Sigma.k.inv[[k]] <- diag(P)*0;
Sigma.inv[[1]] <- diag(P)*K/10;
Sigma.inv.Mu[[1]] <- Sigma.inv[[1]]%*%prior.Mu;
Post.Sigma[[1]] <- solve(Sigma.inv[[1]]);
Post.Mu[1,] <- as.vector(Post.Sigma[[1]]%*%Sigma.inv.Mu[[1]]);
# timer
init.time <- proc.time();
# The actual algorithm...
for(s in 1:S){
#update natural parameters from previous iteration
if(s>1){
Sigma.inv[[s]] <- Sigma.inv[[s-1]];
Sigma.inv.Mu[[s]] <- Sigma.inv.Mu[[s-1]];
}
for(k in 1:K){
cat(" Current Iteration Status: [", s, " out of ", S, "] \n");
cat(" Current Partition Status: [", k, " out of ", K, "] \n");
# 1. Update the Cavity Distribution...
Sigma.inv.cav <- Sigma.inv[[s]] - Sigma.k.inv[[k]];
Sigma.inv.Mu.cav <- Sigma.inv.Mu[[s]] - Sigma.k.inv.Mu[[k]];
Sigma.cav <- solve(Sigma.inv.cav);
Sigma.cav <- (Sigma.cav+t(Sigma.cav))/2; #preserve symmetry
Mu.cav <- as.vector(Sigma.cav%*%Sigma.inv.Mu.cav);
# 2. Find tilted distribution in Stan...
# Extract current partition of the data...
subset = which(bin<=k*360/K & bin>(k-1)*360/K);
y.k <- y[subset];
x.k <- x[subset];
bin.k <- (ceiling(bin[subset] - 1))%%(J/K) + 1;
tilt.data <- list(N=length(y.k), M=P, B=J/K, x=x.k, y=y.k, bin=bin.k, Mu_Cav=Mu.cav, Sig_Cav=Sigma.cav);
# Fit tilted distribution in Stan....
tilt.fit <- sampling(fit, data = tilt.data, iter = 100, chains = 4);
# Extract mean and covariance matrix....
Mu.tilt <- colMeans(extract(tilt.fit)$phi);
Sigma.tilt <- matrix(0, nrow = P, ncol = P);
for(i in 1:P)
for(j in 1:P)
Sigma.tilt[i,j] <- cov(extract(tilt.fit)$phi[,i], extract(tilt.fit)$phi[,j]);
# Bias correction on covariance matrix....
n <- length(extract(tilt.fit)$phi[,1]);
Sigma.tilt #DEBUG
Sigma.inv.tilt <- solve(Sigma.tilt)*(n-P-2)/(n-1);
Sigma.inv.Mu.tilt <- Sigma.inv.tilt%*%Mu.tilt;
# 3. Update the Site Distribution
Sigma.k.inv[[k]] <- Sigma.inv.tilt - Sigma.inv.cav;
Sigma.k.inv.Mu[[k]] <- Sigma.inv.Mu.tilt - Sigma.inv.Mu.cav;
# 4. Update g(phi)
Sigma.inv[[s]] <- SMOOTH*Sigma.inv.tilt + (1-SMOOTH)*Sigma.inv[[s]];
Sigma.inv.Mu[[s]] <- SMOOTH*Sigma.inv.Mu.tilt + (1-SMOOTH)*Sigma.inv.Mu[[s]];
}
# Convert Natural Parameters Back Into Usual Framework
Post.Sigma[[s+1]] = solve(Sigma.inv[[s]]);
Post.Mu[s+1,] = as.vector(Post.Sigma[[s+1]]%*%Sigma.inv.Mu[[s]]);
}
#save the total time elapsed
final.time <- proc.time();
#plot phi v. s, and return all values
EP.plot(exp(Post.Mu), J, K, S);
return(list(Post.Sigma = Post.Sigma, Post.Mu = Post.Mu,
time = final.time - init.time));
}
EP.plot = function(data=NULL, J=360, K=6, S=10, params=expression(mu[alpha],tau[alpha],beta,sigma)){
P <- ncol(data);
plot(c(0:S), data[,1], xlab="Iteration", ylab=expression(phi),
ylim=c(min(data),max(data)), type='l', main=paste("EP: J =",J,", K =",K));
for(p in 2:P)
lines(c(0:S), data[,p], col=p);
legend("bottomleft", col=c(1:P), legend=params, lty=rep(1,P));
}
EP.plot(exp(astro.fit$Post.Mu), J, K, 4)
EP.plot(exp(astro.fit$Post.Mu), J, K, 4)
EP.plot(exp(sim.fit$Post.Mu), J, K, 4)
EP.plot(exp(astro.fit$Post.Mu), J, K, 4)
save.image("~/Dropbox/Documents/School/Columbia/Research/Astronomy/Hierarchical Model/Expectation Propagation/EP.RData")
load("~/Dropbox/Documents/School/Columbia/Research/Astronomy/Hierarchical Model/Expectation Propagation/EP.RData")
actual.fit
exp.curve2 = function(x = 2, a) {
result <- a[4]*a[5]*(1-exp(-x/(a[5]))-a[6]*exp(-.5*((x-a[7])/a[8])^2))
result <- result * inv.logit((x-a[2])/a[3]) + a[1]
return(result)
}
a = c(320, 2, 2.5, 350, 5, .5, 30, 7)
lines((0:500)/10,exp.curve2((0:500)/10,a), col ="red")
exp.curve2 = function(x = 2, a) {
result <- a[4]*a[5]*(1-exp(-x/(a[5]))-a[6]*exp(-.5*((x-a[7])/a[8])^2))
result <- result * inv.logit((x-a[2])/a[3]) + a[1]
return(result)
}
inv.logit <- function(x){ return(1/(1+exp(-x))) }
a = c(320, 2, 2.5, 350, 5, .5, 30, 7)
lines((0:500)/10,exp.curve2((0:500)/10,a), col ="red")
plot((0:500)/10,exp.curve2((0:500)/10,a), col ="red")
exp.curve2 = function(x = 2, a) {
result <- a[4]*a[5]*(1-a[6]*exp(-.5*((x-a[7])/a[8])^2))
result <- result * inv.logit((x-a[2])/a[3]) + a[1]
return(result)
}
inv.logit <- function(x){ return(1/(1+exp(-x))) }
a = c(320, 2, 2.5, 350, 5, .5, 30, 7)
plot((0:500)/10,exp.curve2((0:500)/10,a), col ="red")
exp.curve2 = function(x = 2, a) {
result <- a[4]*(1-a[6]*exp(-.5*((x-a[7])/a[8])^2))
result <- result * inv.logit((x-a[2])/a[3]) + a[1]
return(result)
}
plot((0:500)/10,exp.curve2((0:500)/10,a), col ="red")
a = c(320, 2, 2.5, 350*5, 5, .5, 30, 7)
plot((0:500)/10,exp.curve2((0:500)/10,a), col ="red")
a = c(320, 2, 2.5, 350*5, 5, .5, 50, 7)
plot((0:500)/10,exp.curve2((0:500)/10,a), col ="red")
a = c(185, 5.5, 3.1, 925*6, 5, .5, 21, 6)
plot((0:500)/10,exp.curve2((0:500)/10,a), col ="red")
exp.curve3 = function(x = 2, a) {
result <- a[4]*(1-a[6]*exp(-.5*((x-a[7])/a[8])^2))
result <- result * inv.logit((x-a[2])/a[3]) + a[1]
return(result)
}
exp.curve2 = function(x = 2, a) {
result <- a[4]*a[5]*(1-exp(-x/a[5])-a[6]*exp(-.5*((x-a[7])/a[8])^2))
result <- result * inv.logit((x-a[2])/a[3]) + a[1]
return(result)
}
a_1 = c(185, 5.5, 3.1, 925, 6, .5, 21, 6)
a_2 = c(185, 5.5, 3.1, 925*6, 5, .5, 21, 6)
plot((0:500)/10,exp.curve2((0:500)/10,a_1), col ="red")
lines((0:500)/10,exp.curve3((0:500)/10,a_2), col ="red")
exp.curve3 = function(x = 2, a) {
result <- -a[6]*exp(-.5*((x-a[7])/a[8])^2))
result <- result * inv.logit((x-a[2])/a[3]) + a[1]
return(result)
}
exp.curve3 = function(x = 2, a) {
result <- -a[6]*exp(-.5*((x-a[7])/a[8])^2)
result <- result * inv.logit((x-a[2])/a[3]) + a[1]
return(result)
}
a_2 = c(185, 5.5, 3.1, 925*6, 5, 925*6*.5, 21, 6)
lines((0:500)/10,exp.curve3((0:500)/10,a_2), col ="red")
