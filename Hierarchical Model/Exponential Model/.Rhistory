}
'
model2_fit <- stan_model(model_code = model2_code, model_name = "Model 2");
J = 50;
N = 1000;
sub_data <- model1_sim(phi = c(200, log(5)), J = J, n.samp = N);
pri_mu_cav <- c(200, 0);
pri_sig_cav <- matrix(c(400, 0, 0, 1), nrow = 2, ncol = 2);
init_data <- list();
for(i in 1:4) { init_data[[i]] <- list(phi = pri_mu_cav, theta = rep(0, J));}
data <- list(N = N*J, B = J, y = sub_data$y, bin = sub_data$bin, Mu_Cav = pri_mu_cav, Sig_Cav = pri_sig_cav);
system.time(model2_MC_fit <- sampling(model2_fit, data = data, iter = 1000, chains = 4, init_data = init_data));
colMeans(extract(model2_MC_fit)$phi)
model2_MC_fit
model2_sim <- function(phi = c(200, log(5)), J = 50, n.samp = 1000){
y <- bin <- c();
theta <- rnorm(J, phi[1], exp(phi[2]));
for(j in 1:J){
y_j <- rnorm(n.samp, theta[j], 1);
y <- c(y, y_j);
bin <- c(bin, rep(j, n.samp));
}
x <- y;
return(data.frame(x = x, y = y, bin = bin));
}
sub_data <- model2_sim(phi = c(200, log(5)), J = J, n.samp = N);
data <- list(N = N*J, B = J, y = sub_data$y, bin = sub_data$bin, Mu_Cav = pri_mu_cav, Sig_Cav = pri_sig_cav);
system.time(model2_MC_fit <- sampling(model2_fit, data = data, iter = 1000, chains = 4, init_data = init_data));
model2_MC_fit
cov(extract(model2_MC_fit$phi)[,1], extract(model2_MC_fit$phi)[,2])
cov(extract(model2_MC_fit)$phi[,1], extract(model2_MC_fit)$phi[,2])
model2_EP_fit <- EP(fit = model2_fit, J = J, K = 5, data = sub_data, S = 1, mc_iter = 1000, prior.Mu = pri_mu_cav, parallel = TRUE);
model2_EP_fit
sqrt(0.160327033)
sqrt(0.010007173)
pri_mu_cav <- 200;
pri_sig_cav <- 20;
init_data <- list();
for(i in 1:4) { init_data[[i]] <- list(phi = pri_mu_cav, theta = rep(0, J));}
sub_data <- model1_sim(phi = 200, J = J, n.samp = N);
model1_EP_fit <- Model1_EP(fit = model1_fit, J = J, K = 10, data = sub_data, S = 2, prior.Mu = pri_mu_cav, mc_iter = 1000, parallel = TRUE);
model1_EP_fit <- Model1_EP(fit = model1_fit, J = J, K = 10, data = sub_data, S = 1, prior.Mu = pri_mu_cav, mc_iter = 1000, parallel = TRUE);
model1_EP_fit
Model1_EP = function(fit = NULL, data = NULL, J = 360, K = 6, prior.Mu = 0, prior.Sig = 10, S = 10,
SMOOTH = 0.9, randomSites = FALSE, parallel = FALSE, mc_iter = 100){
# Extract data
y <- data$y;
bin <- data$bin;
# Group the Sites randomly
bin.samp <- sample(unique(bin), replace = FALSE)
# Initialize global and local natural parameters
Sigma.k.inv.Mu <- Sigma.k.inv <- Sigma.inv <- Sigma.inv.Mu <- Post.Sigma <- Post.Mu <- list();
for(k in 1:K) Sigma.k.inv.Mu[[k]] <- 0;
for(k in 1:K) Sigma.k.inv[[k]] <- 0;
Sigma.inv[[1]] <- Sigma.inv[[2]] <- 1/prior.Sig;
Sigma.inv.Mu[[1]] <- Sigma.inv.Mu[[2]] <- Sigma.inv[[1]] * prior.Mu;
Post.Sigma[[1]] <- 1/(Sigma.inv[[1]]);
Post.Mu[[1]] <- Post.Sigma[[1]] * Sigma.inv.Mu[[1]];
init.data <- list()
# timer
init.time <- proc.time();
times <- matrix(0, nrow = S, ncol = 3);
# The actual algorithm...
for(s in 1:S){
#update natural parameters from previous iteration for parallel/serial
if (parallel) {
Sigma.inv[[s+1]] <- Sigma.inv[[1]];
Sigma.inv.Mu[[s+1]] <- Sigma.inv.Mu[[1]];
} else if (s > 1) {
Sigma.inv[[s]] <- Sigma.inv[[s-1]];
Sigma.inv.Mu[[s]] <- Sigma.inv.Mu[[s-1]];
}
for(k in 1:K){
cat(" Current Iteration Status: [", s, " out of ", S, "] \n");
cat(" Current Partition Status: [", k, " out of ", K, "] \n");
# 1. Update the Cavity Distribution...
Sigma.inv.cav <- Sigma.inv[[s]] - Sigma.k.inv[[k]];
Sigma.inv.Mu.cav <- Sigma.inv.Mu[[s]] - Sigma.k.inv.Mu[[k]];
Sigma.cav <- 1/(Sigma.inv.cav);
Mu.cav <- Sigma.cav * Sigma.inv.Mu.cav;
cat("Mu is now", Mu.cav);
# 2. Find tilted distribution in Stan...
# Extract current partition of the data...
if (randomSites) { subset <- which(bin %in% bin.samp[((k-1)*J/K+1) : (k*J/K)]); }
else { subset <- which(bin <= k*J/K & bin > (k-1)*J/K); }
y.k <- y[subset];
x.k <- x[subset];
bin.k <- (ceiling(bin[subset] - 1))%%(J/K) + 1;
tilt.data <- list(N=length(y.k), B=J/K, y=y.k, bin=bin.k, Mu_Cav=Mu.cav, Sig_Cav=Sigma.cav);
# Fit tilted distribution in Stan....
for(i in 1:4) { init.data[[i]] <- list(theta = rep(0, J/K), phi = Mu.cav);}
times[s,] <- system.time(tilt.fit <- sampling(fit, data = tilt.data, iter = mc_iter, chains = 4, init = init.data))[1:3];
# Extract mean and covariance matrix....
Mu.tilt <- mean(extract(tilt.fit)$phi);
Sigma.tilt <- sd(extract(tilt.fit)$phi);
# Bias correction on covariance matrix....
n <- length(extract(tilt.fit)$phi);
Sigma.inv.tilt <- solve(Sigma.tilt) * (n-1-2)/(n-1);
Sigma.inv.Mu.tilt <- Sigma.inv.tilt * Mu.tilt;
# 3. Update the Site Distribution
Sigma.k.inv[[k]] <- Sigma.inv.tilt - Sigma.inv.cav;
Sigma.k.inv.Mu[[k]] <- Sigma.inv.Mu.tilt - Sigma.inv.Mu.cav;
# 4. Update g(phi) in Parallel/Serial
if (parallel) {
Sigma.inv[[s+1]] <- Sigma.inv.tilt + Sigma.inv[[s+1]];
Sigma.inv.Mu[[s+1]] <- Sigma.inv.Mu.tilt + Sigma.inv.Mu[[s+1]];
} else {
Sigma.inv[[s]] <- SMOOTH*Sigma.inv.tilt + (1-SMOOTH) * Sigma.inv[[s]];
Sigma.inv.Mu[[s]] <- SMOOTH*Sigma.inv.Mu.tilt + (1-SMOOTH) * Sigma.inv.Mu[[s]];
}
}
# Convert Natural Parameters Back Into Usual Framework
if (parallel) {
Post.Sigma[[s+1]] = 1/(Sigma.inv[[s+1]]);
Post.Mu[[s+1]] = Post.Sigma[[s+1]] * Sigma.inv.Mu[[s+1]];
} else if (s > 1) {
Post.Sigma[[s+1]] = 1/(Sigma.inv[[s]]);
Post.Mu[[s+1]] = Post.Sigma[[s+1]] * Sigma.inv.Mu[[s]];
}
}
#save the total time elapsed
final.time <- proc.time();
#plot phi v. s, and return all values
#EP.plot(exp(Post.Mu), J, K, S);
return(list(Post.Sigma = Post.Sigma, Post.Mu = Post.Mu,
time = final.time - init.time, times = times));
}
model1_EP_fit <- Model1_EP(fit = model1_fit, J = J, K = 10, data = sub_data, S = 1, prior.Mu = pri_mu_cav, mc_iter = 1000, parallel = TRUE);
model1_EP_fit
Model1_EP = function(fit = NULL, data = NULL, J = 360, K = 6, prior.Mu = 0, prior.Sig = 20, S = 10,
SMOOTH = 0.9, randomSites = FALSE, parallel = FALSE, mc_iter = 100){
# Extract data
y <- data$y;
bin <- data$bin
# Group the Sites randomly
bin.samp <- sample(unique(bin), replace = FALSE)
# Initialize global and local natural parameters
Sigma.k.inv.Mu <- Sigma.k.inv <- Sigma.inv <- Sigma.inv.Mu <- Post.Sigma <- Post.Mu <- list();
for(k in 1:K) Sigma.k.inv.Mu[[k]] <- 0;
for(k in 1:K) Sigma.k.inv[[k]] <- 0;
Sigma.inv[[1]] <- Sigma.inv[[2]] <- 1/prior.Sig;
Sigma.inv.Mu[[1]] <- Sigma.inv.Mu[[2]] <- Sigma.inv[[1]] * prior.Mu;
Post.Sigma[[1]] <- 1/(Sigma.inv[[1]]);
Post.Mu[[1]] <- Post.Sigma[[1]] * Sigma.inv.Mu[[1]];
init.data <- list()
# timer
init.time <- proc.time();
times <- matrix(0, nrow = S, ncol = 3);
# The actual algorithm...
for(s in 1:S){
#update natural parameters from previous iteration for parallel/serial
if (parallel) {
Sigma.inv[[s+1]] <- Sigma.inv[[1]];
Sigma.inv.Mu[[s+1]] <- Sigma.inv.Mu[[1]];
} else if (s > 1) {
Sigma.inv[[s]] <- Sigma.inv[[s-1]];
Sigma.inv.Mu[[s]] <- Sigma.inv.Mu[[s-1]];
}
for(k in 1:K){
cat(" Current Iteration Status: [", s, " out of ", S, "] \n");
cat(" Current Partition Status: [", k, " out of ", K, "] \n");
# 1. Update the Cavity Distribution...
Sigma.inv.cav <- Sigma.inv[[s]] - Sigma.k.inv[[k]];
Sigma.inv.Mu.cav <- Sigma.inv.Mu[[s]] - Sigma.k.inv.Mu[[k]];
Sigma.cav <- 1/(Sigma.inv.cav);
Mu.cav <- Sigma.cav * Sigma.inv.Mu.cav;
cat("Mu is now", Mu.cav);
# 2. Find tilted distribution in Stan...
# Extract current partition of the data...
if (randomSites) { subset <- which(bin %in% bin.samp[((k-1)*J/K+1) : (k*J/K)]); }
else { subset <- which(bin <= k*J/K & bin > (k-1)*J/K); }
y.k <- y[subset];
x.k <- x[subset];
bin.k <- (ceiling(bin[subset] - 1))%%(J/K) + 1;
tilt.data <- list(N=length(y.k), B=J/K, y=y.k, bin=bin.k, Mu_Cav=Mu.cav, Sig_Cav=Sigma.cav);
# Fit tilted distribution in Stan....
for(i in 1:4) { init.data[[i]] <- list(theta = rep(0, J/K), phi = Mu.cav);}
times[s,] <- system.time(tilt.fit <- sampling(fit, data = tilt.data, iter = mc_iter, chains = 4, init = init.data))[1:3];
# Extract mean and covariance matrix....
Mu.tilt <- mean(extract(tilt.fit)$phi);
Sigma.tilt <- sd(extract(tilt.fit)$phi);
# Bias correction on covariance matrix....
n <- length(extract(tilt.fit)$phi);
Sigma.inv.tilt <- solve(Sigma.tilt) * (n-1-2)/(n-1);
Sigma.inv.Mu.tilt <- Sigma.inv.tilt * Mu.tilt;
# 3. Update the Site Distribution
Sigma.k.inv[[k]] <- Sigma.inv.tilt - Sigma.inv.cav;
Sigma.k.inv.Mu[[k]] <- Sigma.inv.Mu.tilt - Sigma.inv.Mu.cav;
# 4. Update g(phi) in Parallel/Serial
if (parallel) {
Sigma.inv[[s+1]] <- Sigma.inv.tilt + Sigma.inv[[s+1]];
Sigma.inv.Mu[[s+1]] <- Sigma.inv.Mu.tilt + Sigma.inv.Mu[[s+1]];
} else {
Sigma.inv[[s]] <- SMOOTH*Sigma.inv.tilt + (1-SMOOTH) * Sigma.inv[[s]];
Sigma.inv.Mu[[s]] <- SMOOTH*Sigma.inv.Mu.tilt + (1-SMOOTH) * Sigma.inv.Mu[[s]];
}
}
# Convert Natural Parameters Back Into Usual Framework
if (parallel) {
Post.Sigma[[s+1]] = 1/(Sigma.inv[[s+1]]);
Post.Mu[[s+1]] = Post.Sigma[[s+1]] * Sigma.inv.Mu[[s+1]];
} else if (s > 1) {
Post.Sigma[[s+1]] = 1/(Sigma.inv[[s]]);
Post.Mu[[s+1]] = Post.Sigma[[s+1]] * Sigma.inv.Mu[[s]];
}
}
#save the total time elapsed
final.time <- proc.time();
#plot phi v. s, and return all values
#EP.plot(exp(Post.Mu), J, K, S);
return(list(Post.Sigma = Post.Sigma, Post.Mu = Post.Mu,
time = final.time - init.time, times = times));
}
model1_EP_fit <- Model1_EP(fit = model1_fit, J = J, K = 10, data = sub_data, S = 1, prior.Mu = pri_mu_cav, prior.Sig = pri_sig_cav, mc_iter = 1000, parallel = TRUE);
model1_EP_fit
data <- list(N = N*J, B = J, y = sub_data$y, bin = sub_data$bin, Mu_Cav = pri_mu_cav, Sig_Cav = pri_sig_cav);
system.time(model1_MC_fit <- sampling(model1_fit, data = data, iter = 1000, chains = 4, init_data = init_data));
model1_MC_fit
sub_data2 = sub_data
data <- list(N = N*J, B = J, y = sub_data2$y, bin = sub_data2$bin, Mu_Cav = pri_mu_cav, Sig_Cav = pri_sig_cav);
pri_mu_cav <- 0;
pri_sig_cav <- 20;
init_data <- list();
for(i in 1:4) { init_data[[i]] <- list(phi = pri_mu_cav, theta = rep(0, J));}
model1_EP_fit <- Model1_EP(fit = model1_fit, J = J, K = 10, data = sub_data2, S = 1, prior.Mu = pri_mu_cav, prior.Sig = pri_sig_cav, mc_iter = 1000, parallel = TRUE);
model1_EP_fit
model1_EP_fit <- Model1_EP(fit = model1_fit, J = J, K = 5, data = sub_data2, S = 1, prior.Mu = pri_mu_cav, prior.Sig = pri_sig_cav, mc_iter = 1000, parallel = TRUE);
model1_EP_fit
model1_EP_fit <- Model1_EP(fit = model1_fit, J = J, K = 25, data = sub_data2, S = 1, prior.Mu = pri_mu_cav, prior.Sig = pri_sig_cav, mc_iter = 1000, parallel = TRUE);
model1_EP_fit
model1_EP_fit <- Model1_EP(fit = model1_fit, J = J, K = 50, data = sub_data2, S = 1, prior.Mu = pri_mu_cav, prior.Sig = pri_sig_cav, mc_iter = 1000, parallel = TRUE);
pri_mu_cav <- 200;
pri_sig_cav <- 20;
init_data <- list();
for(i in 1:4) { init_data[[i]] <- list(phi = pri_mu_cav, theta = rep(0, J));}
model1_EP_fit <- Model1_EP(fit = model1_fit, J = J, K = 25, data = sub_data2, S = 1, prior.Mu = pri_mu_cav, prior.Sig = pri_sig_cav, mc_iter = 1000, parallel = TRUE);
model1_EP_fit
pri_mu_cav <- 0;
pri_sig_cav <- 20;
init_data <- list();
for(i in 1:4) { init_data[[i]] <- list(phi = pri_mu_cav, theta = rep(0, J));}
data <- list(N = N*J, B = J, y = sub_data2$y, bin = sub_data2$bin, Mu_Cav = pri_mu_cav, Sig_Cav = pri_sig_cav);
system.time(model1_MC_fit <- sampling(model1_fit, data = data, iter = 1000, chains = 4, init_data = init_data));
model1_MC_fit
pri_mu_cav <- 200;
pri_sig_cav <- 20;
init_data <- list();
for(i in 1:4) { init_data[[i]] <- list(phi = pri_mu_cav, theta = rep(0, J));}
model1_EP_fit <- Model1_EP(fit = model1_fit, J = J, K = 5, data = sub_data2, S = 1, prior.Mu = pri_mu_cav, prior.Sig = pri_sig_cav, mc_iter = 1000, parallel = TRUE);
model1_EP_fit
pri_mu_cav <- c(0, 0);
pri_sig_cav <- matrix(c(400, 0, 0, 1), nrow = 2, ncol = 2);
init_data <- list();
for(i in 1:4) { init_data[[i]] <- list(phi = pri_mu_cav, theta = rep(0, J));}
model2_EP_fit <- EP(fit = model2_fit, J = J, K = 5, data = sub_data, S = 1, mc_iter = 1000, prior.Mu = pri_mu_cav, parallel = TRUE);
sub_data1 = sub_data2
J = 50;
N = 1000;
sub_data2 <- model2_sim(phi = c(200, log(5)), J = J, n.samp = N);
#  ..... Priors .....
pri_mu_cav <- c(0, 0);
pri_sig_cav <- matrix(c(400, 0, 0, 1), nrow = 2, ncol = 2);
init_data <- list();
for(i in 1:4) { init_data[[i]] <- list(phi = pri_mu_cav, theta = rep(0, J));}
model2_EP_fit <- EP(fit = model2_fit, J = J, K = 5, data = sub_data2, S = 1, mc_iter = 1000, prior.Mu = pri_mu_cav, parallel = TRUE);
model2_EP_fit
sqrt(0.0083847878)
sqrt(0.3335740770)
model2_EP_fit <- EP(fit = model2_fit, J = J, K = 10, data = sub_data2, S = 1, mc_iter = 1000, prior.Mu = pri_mu_cav, parallel = TRUE);
model2_EP_fit
sqrt(0.0053780133)
sqrt(0.0935422525)
model2_EP_fit <- EP(fit = model2_fit, J = J, K = 25, data = sub_data2, S = 1, mc_iter = 1000, prior.Mu = pri_mu_cav, parallel = TRUE);
model2_EP_fit
sqrt(1.502102e-03)
sqrt(1.555815e-02)
data <- list(N = N*J, B = J, y = sub_data1$y, bin = sub_data1$bin, Mu_Cav = pri_mu_cav, Sig_Cav = pri_sig_cav);
system.time(model1_MC_fit <- sampling(model1_fit, data = data, iter = 1000, chains = 4, init_data = init_data));
data <- list(N = N*J, B = J, y = sub_data2$y, bin = sub_data2$bin, Mu_Cav = pri_mu_cav, Sig_Cav = pri_sig_cav);
system.time(model2_MC_fit <- sampling(model2_fit, data = data, iter = 1000, chains = 4, init_data = init_data));
model2_MC_fit
cov(extract(model2_MC_fit)$phi[1], extract(model2_MC_fit)$phi[2])
cov(extract(model2_MC_fit)$phi[,1], extract(model2_MC_fit)$phi[,2])
save.image("~/Library/Mobile Documents/com~apple~CloudDocs/School/Columbia/Research/Astronomy/Hierarchical Model/EP_Test/Easy.RData")
pri_mu_cav <- c(200, 0);
pri_sig_cav <- matrix(c(400, 0, 0, 1), nrow = 2, ncol = 2);
init_data <- list();
for(i in 1:4) { init_data[[i]] <- list(phi = pri_mu_cav, theta = rep(0, J));}
model2_EP_fit <- EP(fit = model2_fit, J = J, K = 10, data = sub_data2, S = 1, mc_iter = 1000, prior.Mu = pri_mu_cav, parallel = TRUE);
model2_EP_fit
sqrt(8.461468e-03)
sqrt(6.367758e-02)
model2_EP_fit <- EP(fit = model2_fit, J = J, K = 25, data = sub_data2, S = 1, mc_iter = 1000, prior.Mu = pri_mu_cav, parallel = TRUE);
model2_EP_fit
sqrt(0.0040026125)
sqrt(0.0121981771)
model2_EP_fit <- EP(fit = model2_fit, J = J, K = 10, data = sub_data2, S = 1, mc_iter = 1000, prior.Mu = pri_mu_cav, parallel = TRUE);
model2_EP_fit
sqrt(0.0082219829)
sqrt(0.0638988236)
pri_mu_cav
model2_EP_fit <- EP(fit = model2_fit, J = J, K = 5, data = sub_data2, S = 1, mc_iter = 1000, prior.Mu = pri_mu_cav, parallel = TRUE);
model2_EP_fit
sqrt(0.0100591427)
sqrt(0.1768881926)
pri_mu_cav <- c(0, 0);
pri_sig_cav <- matrix(c(400, 0, 0, 1), nrow = 2, ncol = 2);
init_data <- list();
for(i in 1:4) { init_data[[i]] <- list(phi = pri_mu_cav, theta = rep(0, J));}
model2_EP_fit <- EP(fit = model2_fit, J = J, K = 25, data = sub_data2, S = 2, mc_iter = 1000, prior.Mu = pri_mu_cav, parallel = TRUE);
model2_EP_fit
save.image("~/Library/Mobile Documents/com~apple~CloudDocs/School/Columbia/Research/Astronomy/Hierarchical Model/EP_Test/Untitled.RData")
load("/Users/swupnil/Library/Mobile Documents/com~apple~CloudDocs/School/Columbia/Research/Astronomy/Hierarchical Model/EP_Test/Untitled.RData")
Model0_EP = function(fit = NULL, data = NULL, prior.Mu = 0, prior.Sig = 10, S = 10,
SMOOTH = 0.9, randomSites = FALSE, parallel = FALSE, mc_iter = 100){
# Extract data
y <- data$y;
# Initialize global and local natural parameters
Sigma.inv <- Sigma.inv.Mu <- Post.Sigma <- list();
Post.Mu <- matrix(0, ncol = 1, nrow = S + 1);
Sigma.inv[[1]] <- Sigma.inv[[2]] <- 1/prior.Sig;
Sigma.inv.Mu[[1]] <- Sigma.inv.Mu[[2]] <- Sigma.inv[[1]] * prior.Mu;
Post.Sigma[[1]] <- 1/Sigma.inv[[1]];
Post.Mu[1,] <- as.vector(Post.Sigma[[1]] * Sigma.inv.Mu[[1]]);
init.data <- list()
# timer
init.time <- proc.time();
times <- matrix(0,nrow=S,ncol=3)
# The actual algorithm...
for(s in 1:S){
#update natural parameters from previous iteration for parallel/serial
if (parallel) {
Sigma.inv[[s+1]] <- Sigma.inv[[1]];
Sigma.inv.Mu[[s+1]] <- Sigma.inv.Mu[[1]];
} else if (s > 1) {
Sigma.inv[[s]] <- Sigma.inv[[s-1]];
Sigma.inv.Mu[[s]] <- Sigma.inv.Mu[[s-1]];
}
cat(" Current Iteration Status: [", s, " out of ", S, "] \n");
# 1. Update the Cavity Distribution...
Sigma.inv.cav <- Sigma.inv[[s]];
Sigma.inv.Mu.cav <- Sigma.inv.Mu[[s]];
Sigma.cav <- 1/(Sigma.inv.cav);
Mu.cav <- as.vector(Sigma.cav * Sigma.inv.Mu.cav);
# Force the same flat prior
Sigma.cav <- 1/(Sigma.inv[[1]]);
# 2. Find tilted distribution in Stan...
# Extract current partition of the data...
tilt.data <- list(N = length(y), y = y, Mu_Cav = Mu.cav, Sig_Cav = Sigma.cav);
# Fit tilted distribution in Stan....
for(i in 1:4) { init.data[[i]] <- list(phi = Mu.cav);}
times[s,] <- system.time(tilt.fit <- sampling(fit, data = tilt.data, iter = mc_iter, chains = 4, init = init.data))[1:3];
# Extract mean and covariance matrix....
Mu.tilt <- mean(extract(tilt.fit)$phi);
Sigma.tilt <- sd(extract(tilt.fit)$phi);
# Bias correction on covariance matrix....
n <- length(extract(tilt.fit)$phi);
Sigma.inv.tilt <- 1/(Sigma.tilt)*(n-1-2)/(n-1);
Sigma.inv.Mu.tilt <- Sigma.inv.tilt * Mu.tilt;
# 4. Update g(phi) in Parallel/Serial
if (parallel) {
Sigma.inv[[s+1]] <- Sigma.inv.tilt;
Sigma.inv.Mu[[s+1]] <- Sigma.inv.Mu.tilt;
} else {
Sigma.inv[[s]] <- SMOOTH*Sigma.inv.tilt + (1-SMOOTH)*Sigma.inv[[s]];
Sigma.inv.Mu[[s]] <- SMOOTH*Sigma.inv.Mu.tilt + (1-SMOOTH)*Sigma.inv.Mu[[s]];
}
# Convert Natural Parameters Back Into Usual Framework
if (parallel) {
Post.Sigma[[s+1]] = 1/(Sigma.inv[[s+1]]);
Post.Mu[s+1,] = as.vector(Post.Sigma[[s+1]] * Sigma.inv.Mu[[s+1]]);
} else if (s > 1) {
Post.Sigma[[s+1]] = solve(Sigma.inv[[s]]);
Post.Mu[s+1,] = as.vector(Post.Sigma[[s+1]] * Sigma.inv.Mu[[s]]);
}
}
#save the total time elapsed
final.time <- proc.time();
#plot phi v. s, and return all values
return(list(Post.Sigma = Post.Sigma, Post.Mu = Post.Mu,
time = final.time - init.time, times = times));
}
model0_sim <- function(phi = 200, n.samp = 1000){
y <- rnorm(n.samp, phi, 1);
data.frame(y = y);
}
sub_data <- model0_sim(phi = 200, n.samp = 1000);
pri_mu_cav <- 0;
init_data <- list();
for(i in 1:4) { init_data[[i]] <- list(phi = pri_mu_cav);}
sub_data0 <- model0_sim(phi = 200, n.samp = 1000);
model0_EP_fit <- Model0_EP(fit = model0_fit, data = sub_data0, S = 4, prior.Mu = pri_mu_cav, prior.Sig = 20, parallel = TRUE);
require("rstan")
model0_EP_fit <- Model0_EP(fit = model0_fit, data = sub_data0, S = 4, prior.Mu = pri_mu_cav, prior.Sig = 20, parallel = TRUE);
model0_EP_fit
model0_EP_fit <- Model0_EP(fit = model0_fit, data = sub_data0, S = 4, prior.Mu = pri_mu_cav, prior.Sig = 20, parallel = TRUE);
model0_EP_fit
save.image("~/Library/Mobile Documents/com~apple~CloudDocs/School/Columbia/Research/Astronomy/Hierarchical Model/EP_Test/Easy.RData")
load("~/Library/Mobile Documents/com~apple~CloudDocs/School/Columbia/Research/Astronomy/Hierarchical Model/EP_Test/Easy.RData")
J = 50;
N = 1000;
sub_data2 <- model2_sim(phi = c(200, log(5)), J = J, n.samp = N);
pri_mu_cav <- c(0, 0);
pri_sig_cav <- matrix(c(400, 0, 0, 1), nrow = 2, ncol = 2);
init_data <- list();
for(i in 1:4) { init_data[[i]] <- list(phi = pri_mu_cav, theta = rep(0, J));}
model2_EP_fit <- EP(fit = model2_fit, J = J, K = 25, data = sub_data2, S = 2, mc_iter = 1000, prior.Mu = pri_mu_cav, parallel = TRUE);
require("rstan")
model2_EP_fit <- EP(fit = model2_fit, J = J, K = 25, data = sub_data2, S = 2, mc_iter = 1000, prior.Mu = pri_mu_cav, parallel = TRUE);
model2_EP_fit <- EP(fit = model2_fit, J = J, K = 25, data = sub_data2, S = 3, mc_iter = 1000, prior.Mu = pri_mu_cav, parallel = TRUE);
model1_EP_fit
model2_EP_fit
model1_EP_fit <- Model1_EP(fit = model1_fit, J = J, K = 10, data = sub_data1, S = 2, prior.Mu = pri_mu_cav, prior.Sig = pri_sig_cav, mc_iter = 1000, parallel = TRUE);
pri_mu_cav <- 200;
pri_sig_cav <- 20;
init_data <- list();
for(i in 1:4) { init_data[[i]] <- list(phi = pri_mu_cav, theta = rep(0, J));}
model1_EP_fit <- Model1_EP(fit = model1_fit, J = J, K = 10, data = sub_data1, S = 2, prior.Mu = pri_mu_cav, prior.Sig = pri_sig_cav, mc_iter = 1000, parallel = TRUE);
model2_EP_fit
model1_EP_fit
i <- sample(rep(c(0,1),50), 100, replace = F)
t <- sample(rep(c(0,1),50), 100, replace = F)
it <- i * t
y <- 5 + 3 * i - 4 * t + 1 * it + rnorm(100, 0, 1)
lm(y~i +t + it)
lm(y[t==0] ~ i[t==0])
lm(y[t==1] ~ i[t==1])
summary(lm(y~i +t + it))
summary(lm(y[t==0] ~ i[t==0]))
load("~/Library/Mobile Documents/com~apple~CloudDocs/School/Columbia/Research/Astronomy/Hierarchical Model/Exponential Model/Exponential.RData")
current_data <- read.csv(paste("Output/ParamsBy0.1/",0,"-",0.1,".csv",sep=""));
View(current_data)
View(current_data[,1])
View(current_data[,2])
fitted_a <- matrix(0, nrow = 360, ncol = 8);
for(i in 0:359){
cat("Degrees: ",i,"\n")
current_data <- read.csv(paste("Output/ParamsBy0.1/",i,"-",i+0.1,".csv",sep=""));
fitted_a[i,] <- colMeans(current_data)[-1];
}
rm(current_data)
View(fitted_a)
for(i in 0:359){
cat("Degrees: ",i,"\n")
current_data <- read.csv(paste("Output/ParamsBy0.1/",i,"-",i+0.1,".csv",sep=""));
fitted_a[i+1,] <- colMeans(current_data)[-1];
}
rm(current_data)
View(fitted_a)
colMeans(fitted_a)
exp(colMeans(log(fitted_a)))
hist(fitted_a[,1])
hist(fitted_a[,2])
hist(fitted_a[,3])
hist(fitted_a[,4])
hist(fitted_a[,5])
hist(fitted_a[,6])
hist(fitted_a[,7])
hist(fitted_a[,8])
hist(fitted_a[,9])
hist(exp(fitted_a[,1]))
hist(log(fitted_a[,1]))
hist(log(fitted_a[,1]), bins = 20)
hist(log(fitted_a[,1]), bin = 20)
hist(log(fitted_a[,1]),breaks = 20)
hist(log(fitted_a[,1]),breaks = 20)
hist(log(fitted_a[,2]),breaks = 20)
hist(log(fitted_a[,3]),breaks = 20)
hist(log(fitted_a[,4]),breaks = 20)
hist(log(fitted_a[,5]),breaks = 20)
hist(log(fitted_a[,6]),breaks = 20)
hist(log(fitted_a[,7]),breaks = 20)
hist(log(fitted_a[,8]),breaks = 20)
hist(log(fitted_a[,9]),breaks = 20)
fitted_a <- matrix(0, nrow = 360, ncol = 8);
for(i in 0:359){
cat("Degrees: ",i,"\n")
current_data <- read.csv(paste("Output/ParamsBy0.1/",i,"-",i+0.1,".csv",sep=""));
fitted_a[i+1,] <- colMeans(log(current_data))[-1];
}
hist(fitted_a[,1],breaks = 20)
hist(fitted_a[,2],breaks = 20)
hist(fitted_a[,3],breaks = 20)
hist(fitted_a[,4],breaks = 20)
hist(fitted_a[,5],breaks = 20)
hist(fitted_a[,6],breaks = 20)
hist(fitted_a[,7],breaks = 20)
hist(fitted_a[,8],breaks = 20)
fitted_a <- matrix(0, nrow = 360, ncol = 8);
for(i in 0:359){
cat("Degrees: ",i,"\n")
current_data <- read.csv(paste("Output/ParamsBy0.1/",i,"-",i+0.1,".csv",sep=""));
fitted_a[i+1,] <- apply(current_data,2,median)[-1];
}
hist(fitted_a[,1])
hist(fitted_a[,2])
hist(fitted_a[,3])
hist(fitted_a[,4])
hist(fitted_a[,5])
hist(fitted_a[,6])
hist(fitted_a[,7])
hist(fitted_a[,8])
hist(log(fitted_a[,1]))
hist(log(fitted_a[,2]))
hist(log(fitted_a[,3]))
hist(log(fitted_a[,4]))
hist(log(fitted_a[,5]))
hist(log(fitted_a[,6]))
hist(log(fitted_a[,7]))
hist(log(fitted_a[,8]))
colMeans(log(fitted_a))
apply(log(fitted_a), 2, sd)
